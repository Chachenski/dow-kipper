{"ast":null,"code":"const url = \"http://localhost:8080/security\";\nexport async function authenticate(credentials) {\n  const init = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    },\n    body: JSON.stringify(credentials)\n  };\n  const response = await fetch(`${url}/authenticate`, init);\n  if (response.status === 200) {\n    const data = await response.json();\n    return makeUser(data);\n  } else {\n    return Promise.reject(\"Bad credentials\");\n  }\n}\nexport async function refreshToken() {\n  const jwtToken = localStorage.getItem(\"jwt_token\");\n  const init = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: `Bearer ${jwtToken}`\n    }\n  };\n  const response = await fetch(`${url}/refresh-token`, init);\n  if (response.status === 200) {\n    const data = await response.json();\n    return makeUser(data);\n  } else {\n    signOut();\n    return Promise.reject(\"Session expired\");\n  }\n}\nexport function signOut() {\n  localStorage.removeItem(\"jwt_token\");\n}\nconst makeUser = authResponse => {\n  const jwtToken = authResponse.jwt_token;\n  localStorage.setItem(\"jwt_token\", jwtToken);\n  return makeUserFromJwt(jwtToken);\n};\nconst makeUserFromJwt = jwtToken => {\n  const tokenParts = jwtToken.split(\".\");\n  if (tokenParts.length > 1) {\n    const userData = tokenParts[1];\n    const decodedUserData = JSON.parse(atob(userData));\n    return {\n      appUserId: decodedUserData.app_user_id,\n      username: decodedUserData.sub,\n      roles: decodedUserData.authorities.split(\",\")\n    };\n  }\n};","map":{"version":3,"names":["url","authenticate","credentials","init","method","headers","Accept","body","JSON","stringify","response","fetch","status","data","json","makeUser","Promise","reject","refreshToken","jwtToken","localStorage","getItem","Authorization","signOut","removeItem","authResponse","jwt_token","setItem","makeUserFromJwt","tokenParts","split","length","userData","decodedUserData","parse","atob","appUserId","app_user_id","username","sub","roles","authorities"],"sources":["/Users/chachenski/Desktop/Capstone/dow-kipper-typescript/client/src/services/AuthApi.tsx"],"sourcesContent":["const url = \"http://localhost:8080/security\";\n\nexport async function authenticate(credentials: any) {\n  const init = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n    body: JSON.stringify(credentials),\n  };\n\n  const response = await fetch(`${url}/authenticate`, init);\n\n  if (response.status === 200) {\n    const data = await response.json();\n    return makeUser(data);\n  } else {\n    return Promise.reject(\"Bad credentials\");\n  }\n}\n\nexport async function refreshToken() {\n  const jwtToken = localStorage.getItem(\"jwt_token\");\n\n  const init = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: `Bearer ${jwtToken}`,\n    },\n  };\n\n  const response = await fetch(`${url}/refresh-token`, init);\n\n  if (response.status === 200) {\n    const data = await response.json();\n    return makeUser(data);\n  } else {\n    signOut();\n    return Promise.reject(\"Session expired\");\n  }\n}\n\nexport function signOut() {\n  localStorage.removeItem(\"jwt_token\");\n}\n\nconst makeUser = (authResponse: { jwt_token: any }) => {\n  const jwtToken = authResponse.jwt_token;\n  localStorage.setItem(\"jwt_token\", jwtToken);\n  return makeUserFromJwt(jwtToken);\n};\n\nconst makeUserFromJwt = (jwtToken: string) => {\n  const tokenParts = jwtToken.split(\".\");\n  if (tokenParts.length > 1) {\n    const userData = tokenParts[1];\n    const decodedUserData = JSON.parse(atob(userData));\n    return {\n      appUserId: decodedUserData.app_user_id,\n      username: decodedUserData.sub,\n      roles: decodedUserData.authorities.split(\",\"),\n    };\n  }\n};"],"mappings":"AAAA,MAAMA,GAAG,GAAG,gCAAgC;AAE5C,OAAO,eAAeC,YAAYA,CAACC,WAAgB,EAAE;EACnD,MAAMC,IAAI,GAAG;IACXC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCC,MAAM,EAAE;IACV,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW;EAClC,CAAC;EAED,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEX,GAAI,eAAc,EAAEG,IAAI,CAAC;EAEzD,IAAIO,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;IAC3B,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAClC,OAAOC,QAAQ,CAACF,IAAI,CAAC;EACvB,CAAC,MAAM;IACL,OAAOG,OAAO,CAACC,MAAM,CAAC,iBAAiB,CAAC;EAC1C;AACF;AAEA,OAAO,eAAeC,YAAYA,CAAA,EAAG;EACnC,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAElD,MAAMlB,IAAI,GAAG;IACXC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1BgB,aAAa,EAAG,UAASH,QAAS;IACpC;EACF,CAAC;EAED,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEX,GAAI,gBAAe,EAAEG,IAAI,CAAC;EAE1D,IAAIO,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;IAC3B,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAClC,OAAOC,QAAQ,CAACF,IAAI,CAAC;EACvB,CAAC,MAAM;IACLU,OAAO,CAAC,CAAC;IACT,OAAOP,OAAO,CAACC,MAAM,CAAC,iBAAiB,CAAC;EAC1C;AACF;AAEA,OAAO,SAASM,OAAOA,CAAA,EAAG;EACxBH,YAAY,CAACI,UAAU,CAAC,WAAW,CAAC;AACtC;AAEA,MAAMT,QAAQ,GAAIU,YAAgC,IAAK;EACrD,MAAMN,QAAQ,GAAGM,YAAY,CAACC,SAAS;EACvCN,YAAY,CAACO,OAAO,CAAC,WAAW,EAAER,QAAQ,CAAC;EAC3C,OAAOS,eAAe,CAACT,QAAQ,CAAC;AAClC,CAAC;AAED,MAAMS,eAAe,GAAIT,QAAgB,IAAK;EAC5C,MAAMU,UAAU,GAAGV,QAAQ,CAACW,KAAK,CAAC,GAAG,CAAC;EACtC,IAAID,UAAU,CAACE,MAAM,GAAG,CAAC,EAAE;IACzB,MAAMC,QAAQ,GAAGH,UAAU,CAAC,CAAC,CAAC;IAC9B,MAAMI,eAAe,GAAGzB,IAAI,CAAC0B,KAAK,CAACC,IAAI,CAACH,QAAQ,CAAC,CAAC;IAClD,OAAO;MACLI,SAAS,EAAEH,eAAe,CAACI,WAAW;MACtCC,QAAQ,EAAEL,eAAe,CAACM,GAAG;MAC7BC,KAAK,EAAEP,eAAe,CAACQ,WAAW,CAACX,KAAK,CAAC,GAAG;IAC9C,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}